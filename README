autor: Nikolaos Dymitriadis, 334438

Uruchamianie:
Interpreter obsługuje czytanie z pliku oraz ze standardowego wejścia:
    ./interpreter file
    ./interpreter < file

Krótki opis języka:

Język stanowi luźne połączenie języków imperatywnych w stylu pascala z językami
funkcyjnymi(dlatego nazywa się haskall). Funkcje w języku są czyste (nie
zmieniają stanu) i traktowane są jako zwyczajne wartości, w szczególności mogą
być podawane jako argumenty innych funkcji. 

Obsługiwane typy to int oraz ból + wszystkie typy funkcyjne, które można na
ich podstawie zbudować.

Język posiada standardowe funkcyjne konstrukcje z wyrażeń:
    + iff-then-else
    + let-in

Wszystkie funkcje tworzone są w postaci wieloargumentowych wyrażeń lamda:
    fun([arg : type]) : type = expression
Funkcje rekurencyjne tworzone są poprzez nazwalne lambdy:
    fun f([arg : type]) : type = expr
gdzie expr może zawierać odwołania do f

Z konstrukcji imperatywnych zaimplementowane zostały:
    + bloki, podzielone na sekcję deklaracji oraz sekcję poleceń, pascal-style
    + if-then-else-fi
    + while-do-done
    + przypisania do zmiennych
    + instrukcja pusta "procrastinate"

Deklaracje zmiennych w blokach i wyrażeniach let-in nie wymagają jawnego podania
typów( typy są wnioskowane ), ale po nazwie zmiennej może nastąpić sygnatura
    var [: type]
która zostanie sprawdzona.

Komentarze mają postać jednolinijkową
    ;; komentarz
lub wielo:
    <; komentarz ;>

Wejście:
Interpreter przyjmuje dwa rodzaje wejścia:
    + wyrażenie do obliczenia, dla którego wypisuje wartość
    + instrukcję(dowolną, ale najwięcej sensu robi oczywiście blok), dla której
      wypisuje stan końcowy

Zapożyczenia:
Gramatyka w dużej mierze zapożyczona z gramatyki c-- z tutoriala dla bnfc.
