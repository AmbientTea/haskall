Nikolaos Dymitriadis, 334438

### Opis Języka ###

Język jest prawie w całości wzorowany na wymaganiach pierwszych 3
podpunktów dla języków imperatywnych i większość konstrukcji
zapożycza z Paskala: słowne bloki, pascalowy for, notacja typów.

Jedyną niestandardową konstrukcją jest if-then-else dla wyrażeń,
oraz rozróżnienie procedur i funkcji jako bloku instrukcji oraz
wyrażenia.

### Gramatyka: ###

int_const  ::= 0 | 1 | -1 | ...
bool_const ::= 'true' | 'false'
void_const ::= 'unit'
var        ::= [a-zA-Z_]+
type       ::= 'int' | 'bool' | 'void'

int_exp ::= int_const | var | (int_exp) |
	int_exp + int_exp | int_exp - int_exp |
	int_exp * int_exp | int_exp / int_exp |
	'if' bool_exp 'then' int_exp 'else' int_exp |
	fun_run | proc_run
	
bool_exp ::= bool_const | var | (bool_exp) |
	int_exp > int_exp | int_exp == int_exp | int_exp < int_exp |
	bool_exp 'and' bool_exp | bool_exp 'or' bool_exp |
	'not' bool_exp |
	'if' bool_exp 'then' bool_exp 'else' bool_exp |
	fun_run | proc_run

exp ::= int_exp | bool_exp

var_decl         ::= 'var' var : type [= exp]
proc_decl        ::= 'proc' var ([var : type {, var : type}]) : type proc_block
fun_decl         ::= 'fun' var ([var : type {, var : type}]) : type = exp
decl             ::= var_decl | proc_decl | fun_decl | decl, decl

proc_run         ::= var ([exp {,exp}])
fun_run          ::= var ([exp {,exp}])

assign      ::= var := exp;
if_instr    ::= 'if' bool_exp 'then' instr ['else' instr]
while_instr ::= 'while' bool_exp 'do' instr
block       ::= 'begin' [decl] [instr] 'end'
proc_plock  ::= 'begin' [decl] [instr] 'end' ['return' exp]
for_instr   ::= 'for' var 'from' int_exp 'to' int_exp 'do' instr

instr ::= 'skip' | assign | if_instr | while_instr | block | proc_run | for_instr

### Przykładowy program ###

begin
	proc factorial1 ( n : int ) : int
	begin
		var a : int = 1
		
		while 1 < n do
		begin
			a = a * n;
			n = n-1
		end
	end return a,
	
	fun fact ( n : int, a : int ) : int = if n < 2 then a else fact(n-1, a*n),
	fun factorial2 ( n : int ) : int = (fact(n,1)),
	
	var x : int = 10,
	var y : int = if x > 7 then factorial1(x) else factorial2(x) - 1
	
	if x < 11 then x = x + 1 else x 
end
{ x = 11, y = 10! }










